// ğŸ”µ 1. Seleccionamos elementos clave del DOM
const carrusel = document.getElementById('carrusel');       // Contenedor horizontal del carrusel
const indicadores = document.getElementById('indicadores'); // Contenedor de los indicadores (dots)
const reseÃ±as = carrusel.querySelectorAll('.reseÃ±a');       // Todas las tarjetas de reseÃ±as

// ğŸ”µ 2. Variables de configuraciÃ³n
const gap = 30;                         // Espacio entre reseÃ±as
const totalItems = reseÃ±as.length;     // Total de reseÃ±as
let visibleItems = 3;                  // CuÃ¡ntas reseÃ±as se muestran al mismo tiempo
let totalSlides = 0;                   // CuÃ¡ntas "pÃ¡ginas" hay en total
let currentSlide = 0;                  // Slide actual (pÃ¡gina actual del carrusel)
let autoScroll;                        // Intervalo para auto-avance

// ğŸ”µ 3. Calcula cuÃ¡ntos elementos mostrar segÃºn el tamaÃ±o de pantalla
function getVisibleItems() {
  const ancho = window.innerWidth;
  if (ancho <= 500) return 1;     // ğŸŸ¡ TelÃ©fonos pequeÃ±os: 1 reseÃ±a por vez
  if (ancho <= 900) return 2;     // ğŸŸ¢ Tablets: 2 reseÃ±as
  return 3;                       // ğŸ”µ Pantallas grandes: 3 reseÃ±as
}

// ğŸ”µ 4. Configura carrusel e indicadores segÃºn el tamaÃ±o de pantalla
function actualizarLayout() {
  visibleItems = getVisibleItems();
  totalSlides = Math.ceil(totalItems / visibleItems);
  currentSlide = 0;
  crearIndicadores();
  actualizarTransform();
}

// ğŸ”µ 5. Crea los botones de navegaciÃ³n (dots) abajo del carrusel
function crearIndicadores() {
  indicadores.innerHTML = '';
  for (let i = 0; i < totalSlides; i++) {
    const dot = document.createElement('button');
    if (i === 0) dot.classList.add('activo');
    dot.addEventListener('click', () => {
      currentSlide = i;
      actualizarTransform();
    });
    indicadores.appendChild(dot);
  }
}

// ğŸ”µ 6. Desplaza el carrusel horizontalmente segÃºn la slide actual
function actualizarTransform() {
  const reseÃ±aWidth = carrusel.querySelector('.reseÃ±a').offsetWidth + gap;
  const desplazamiento = currentSlide * reseÃ±aWidth;
  carrusel.style.transform = `translateX(-${desplazamiento}px)`;
  actualizarIndicadores(currentSlide);
}

// ğŸ”µ 7. Actualiza quÃ© dot estÃ¡ activo
function actualizarIndicadores(index) {
  const dots = indicadores.querySelectorAll('button');
  dots.forEach(dot => dot.classList.remove('activo'));
  if (dots[index]) dots[index].classList.add('activo');
}

// ğŸ”µ 8. Mueve el carrusel manualmente hacia adelante o atrÃ¡s
function moverCarrusel(direccion) {
  currentSlide += direccion;
  if (currentSlide < 0) currentSlide = totalSlides - 1;
  if (currentSlide >= totalSlides) currentSlide = 0;
  actualizarTransform();
}

// ğŸ”µ 9. Inicia el auto-scroll del carrusel (cada 4 segundos)
function iniciarAutoScroll() {
  autoScroll = setInterval(() => {
    moverCarrusel(1);
  }, 4000);
}

// ğŸ”µ 10. Detiene el auto-scroll temporalmente
function detenerAutoScroll() {
  clearInterval(autoScroll);
}

// ğŸ”µ 11. Pausa auto-scroll al pasar el mouse (solo desktop)
carrusel.addEventListener('mouseover', detenerAutoScroll);
carrusel.addEventListener('mouseout', iniciarAutoScroll);

// ğŸ”µ 12. Swipe en mÃ³viles: detecta movimiento horizontal
let startX = 0;
let isDown = false;

carrusel.addEventListener('touchstart', (e) => {
  startX = e.touches[0].clientX;
  isDown = true;
  detenerAutoScroll();
});

carrusel.addEventListener('touchend', (e) => {
  if (!isDown) return;
  const endX = e.changedTouches[0].clientX;
  const diff = startX - endX;

  if (Math.abs(diff) > 50) {
    if (diff > 0) moverCarrusel(1);    // swipe izquierda â†’ siguiente
    else moverCarrusel(-1);           // swipe derecha â†’ anterior
  }

  isDown = false;
  iniciarAutoScroll();
});

// ğŸ”µ 13. Recalcula todo cuando cambia el tamaÃ±o de la ventana
window.addEventListener('resize', actualizarLayout);

// ğŸ”µ 14. Inicializa el carrusel cuando carga la pÃ¡gina
window.addEventListener('load', actualizarLayout);
iniciarAutoScroll();
